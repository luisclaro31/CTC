<project name="phprojekt6" default="build" basedir=".">

    <property name="project.name" value="phprojekt6" />
    <property name="project.dir" location="${basedir}/.." />

    <property name="test.dir" location="${project.dir}/tests/UnitTests" />
    <property name="log.dir" location="${project.dir}/tests/log" />
    <property name="doc.dir" location="${project.dir}/tests/phpdoc/phpdoc" />
    <property name="cs.dir" location="${project.dir}/tests/phpdoc/cs" />

    <property name="phpdocumentor.log" location="${log.dir}/phpdocumentor.log" />
    <property name="phpunit.class" value="AllTests" />
    <property name="phpunit.file" location="${test.dir}/AllTests.php" />
    <property name="phpunit.log" location="${log.dir}/phpunit.xml" />
    <property name="phpcs.log" location="${cs.dir}/index.xml" />
    <property name="phpcs.xsl" value="phpcs.xsl" />
    <property name="project.configfile" location="${test.dir}/configuration.php" />

    <!-- Configure these values to fit your installation -->
    <!-- Where does Zend_Cache put its files? -->
    <property name="project.zendcache.dir" location="/tmp" />

    <!-- How to connect to the mysql database? -->
    <property name="database.params.host" value="localhost" />
    <property name="database.params.dbname" value="SET_DATABASE_HERE" />
    <property name="database.params.username" value="SET_USERNAME_HERE" />
    <property name="database.params.password" value="SET_PASSWORD_HERE" />

    <!-- Where are files located? -->
    <property name="database.testdatafile" location="${basedir}/test_database.sql" />
    <property name="doc.dir.imagesource" location="/usr/share/php5/PEAR/data/PhpDocumentor/phpDocumentor/Converters/HTML/frames/templates/earthli/templates/media/images" />


    <target name="config-check">
        <fail message="You have not configured the database access in the build file.">
            <condition>
                <or>
                    <equals arg1="${database.params.dbname}" arg2="SET_DATABASE_HERE" />
                    <equals arg1="${database.params.username}" arg2="SET_USERNAME_HERE" />
                    <equals arg1="${database.params.password}" arg2="SET_PASSWORD_HERE" />
                </or>
            </condition>
        </fail>
    </target>

    <target name="prepare" depends="logdir-prepare,phpdoc-prepare" description="Prepare the build process">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${log.dir}" includes="**/*"/>
            <fileset dir="${doc.dir}" includes="**/*"/>
            <fileset dir="${cs.dir}" includes="**/*"/>
        </delete>
    </target>

    <target name="logdir-prepare">
        <mkdir dir="${log.dir}" />
    </target>

    <target name="configure" depends="logdir-prepare,config-check" description="Create configuration.php file">
        <echo file="${project.configfile}" append="false">[testing-mysql : general]
database.adapter            = "Pdo_Mysql"
database.params.host        = "${database.params.host}"
database.params.dbname      = "${database.params.dbname}"
database.params.username    = "${database.params.username}"
database.params.password    = "${database.params.password}"

[testing-pgsql: general]
database.adapter            = "Pdo_Pgsql"
database.params.host        = "localhost"
database.params.dbname      = "phprojekt-mvc-testing"
database.params.username    = "phprojekt"
database.params.password    = "phprojekt"

[general]
applicationDir       = "${project.dir}"

log.debug.filename   = "${log.dir}/debug.log"

itemsPerPage         = 3;
</echo>
    </target>

    <target name="test" depends="dbupdate" description="Run the PHPUnit tests">
        <exec dir="${test.dir}" executable="php" failonerror="false">
            <arg value="${phpunit.file}" />
        </exec>
        <delete>
            <fileset dir="${project.zendcache.dir}" includes="zend_cache*" />
        </delete>
    </target>

    <target name="dbclean" depends="config-check" description="Drops and inits new database">
    	<exec executable="/usr/bin/mysql">
            <arg line="--user=${database.params.username}" />
            <arg line="--password=${database.params.password}" />
            <arg line="--execute=&quot;DROP DATABASE IF EXISTS `${database.params.dbname}`; CREATE DATABASE `${database.params.dbname}` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;&quot;" />
    	</exec>
    </target>

    <target name="dbupdate" depends="config-check, dbclean" description="Set up the test db">
        <exec executable="/usr/bin/mysql">
            <arg line="--user=${database.params.username}" />
            <arg line="--password=${database.params.password}" />
            <arg line="--database=${database.params.dbname}" />
            <redirector input="${database.testdatafile}" />
        </exec>
    </target>

    <target name="phpdoc-prepare">
        <mkdir dir="${doc.dir}" />
        <copy todir="${doc.dir}/media/images">
            <fileset dir="${doc.dir.imagesource}" />
        </copy>
    </target>

    <target name="phpdoc" depends="phpdoc-prepare" description="Generate the API documentation">
        <exec dir="${basedir}" executable="phpdoc" failonerror="false" output="${phpdocumentor.log}">
            <arg line="-d ${project.dir}/application -s on -t ${doc.dir} -ti ${project.name}" />
        </exec>
    </target>

    <target name="cs-prepare" depends="logdir-prepare">
        <mkdir dir="${cs.dir}" />
        <echo file="${cs.dir}/${phpcs.xsl}" append="false"><![CDATA[<xsl:stylesheet  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="html" indent="yes"/>
<xsl:decimal-format decimal-separator="." grouping-separator="," />

<xsl:template match="phpcs">
  <html>
    <head>
    <style type="text/css">
    .bannercell {
      border: 0px;
      padding: 0px;
    }
    body {
      margin-left: 10;
      margin-right: 10;
      font:normal 80% arial,helvetica,sanserif;
      background-color:#FFFFFF;
      color:#000000;
    }
    .a td {
      background: #efefef;
    }
    .b td {
      background: #fff;
    }
    th, td {
      text-align: left;
      vertical-align: top;
    }
    th {
      font-weight:bold;
      background: #ccc;
      color: black;
    }
    table, th, td {
      font-size:100%;
      border: none
    }
    table.log tr td, tr th {

    }
    h1 {
      font-weight:bold;
      font-size:140%;
      margin-bottom: 5;
    }
    h2 {
      font-size:100%;
      font-weight:bold;
      background: #525D76;
      color: white;
      text-decoration: none;
      padding: 5px;
      margin-right: 2px;
      margin-left: 2px;
      margin-bottom: 0;
    }
    </style>
    </head>
    <body id="top">
      <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr>
        <td class="bannercell" rowspan="2">
        </td>
        <td class="text-align:right"><h1>CheckStyle Audit</h1></td>
        </tr>
      </table>
      <hr size="1"/>

      <!-- Summary part -->
      <xsl:apply-templates select="." mode="summary"/>
      <hr size="1" width="100%" align="left"/>

      <!-- Package List part -->
      <xsl:apply-templates select="." mode="filelist"/>
      <hr size="1" width="100%" align="left"/>

      <!-- For each package create its part -->
      <xsl:for-each select="file">
        <xsl:sort select="@name"/>
        <xsl:apply-templates select="."/>
        <p/>
        <p/>
      </xsl:for-each>
      <hr size="1" width="100%" align="left"/>


    </body>
  </html>
</xsl:template>



  <xsl:template match="phpcs" mode="filelist">
    <h2>Files</h2>
    <table class="log" border="0" cellpadding="5" cellspacing="2" width="100%">
      <tr>
        <th>Name</th>
        <th>Errors</th>
      </tr>
      <xsl:for-each select="file">
        <xsl:sort data-type="number" order="descending" select="count(error)"/>
        <xsl:variable name="errorCount" select="count(error)"/>
        <xsl:if test="$errorCount > 0">
        <tr>
          <xsl:call-template name="alternated-row"/>
          <td><a href="#f-{@name}"><xsl:value-of select="@name"/></a></td>
          <td><xsl:value-of select="$errorCount"/></td>
        </tr>
        </xsl:if>
      </xsl:for-each>
    </table>
  </xsl:template>


  <xsl:template match="file">
    <xsl:variable name="errorCount" select="count(error)"/>
    <xsl:if test="$errorCount > 0">
    <a name="f-{@name}"></a>
    <h2>File <xsl:value-of select="@name"/></h2>
    <table class="log" border="0" cellpadding="5" cellspacing="2" width="100%">
      <tr>
        <th>Error Description</th>
        <th>Line</th>
        <th>Column</th>
      </tr>
      <xsl:for-each select="error">
        <tr>
          <xsl:call-template name="alternated-row"/>
          <td><xsl:value-of select="."/></td>
          <td><xsl:value-of select="@line"/></td>
          <td><xsl:value-of select="@column"/></td>
        </tr>
      </xsl:for-each>
    </table>
    <a href="#top">Back to top</a>
    </xsl:if>
  </xsl:template>


  <xsl:template match="phpcs" mode="summary">
    <h2>Summary</h2>
    <xsl:variable name="fileCount" select="count(//file)"/>
    <xsl:variable name="errorCount" select="count(//file/error)"/>
    <table class="log" border="0" cellpadding="5" cellspacing="2" width="100%">
    <tr>
      <th>Files</th>
      <th>Errors</th>
    </tr>
    <tr>
      <xsl:call-template name="alternated-row"/>
      <td><xsl:value-of select="$fileCount"/></td>
      <td><xsl:value-of select="$errorCount"/></td>
    </tr>
    </table>
  </xsl:template>

  <xsl:template name="alternated-row">
    <xsl:attribute name="class">
      <xsl:if test="position() mod 2 = 1">a</xsl:if>
      <xsl:if test="position() mod 2 = 0">b</xsl:if>
    </xsl:attribute>
  </xsl:template>
</xsl:stylesheet>

        ]]>
        </echo>
    </target>

    <target name="cs" depends="logdir-prepare,cs-prepare" description="Run CodeSniffer checks and generate error report">
        <exec dir="${basedir}" executable="phpcs" failonerror="false">
            <arg line="-n --standard=Zend --extensions=php --report=xml --ignore=.inc.php ${project.dir}/application ${project.dir}/library/Phprojekt ${test.dir}" />
            <redirector output="${phpcs.log}">
                <outputfilterchain>
                    <replacestring from="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;" to="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;${phpcs.xsl}&quot; ?&gt;" />
                </outputfilterchain>
            </redirector>
        </exec>
    </target>
    <target name="build"
        depends="prepare,configure,dbupdate,cs,test,phpdoc"
        description="Build the whole project" />

</project>
